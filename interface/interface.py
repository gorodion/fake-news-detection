import streamlit as st
from annotated_text import annotated_text
import json

st.set_page_config(
   page_title="Fake Detection",
   page_icon="ü§ñ",
    layout='wide'
)


# from config import sources
source_dict = {}

def annotate_text(ner):
    text = [tuple(i) if type(i) == list else i for i in ner]
    annotated_text(*text)

if 'sources' not in st.session_state.keys():
    sources = ['–ò–Ω—Ç–µ—Ä—Ñ–∞–∫—Å', '–†–ë–ö', 'Mos.ru', '–ö–æ–º–º–µ—Ä—Å–∞–Ω—Ç', '–õ–µ–Ω—Ç–∞', '–¢–ê–°–°']
    st.session_state['sources'] = sources
else:
    sources = st.session_state['sources']

def get_report(header, text, sources):
    json_path = "./back_result.json"
    with open(json_path, 'r', encoding='utf-8') as f:
        result = json.loads(f.read())
    return result

def get_selected_checkboxes():
    return [i.replace('dynamic_checkbox_','') for i in st.session_state.keys()\
            if i.startswith('dynamic_checkbox_') and st.session_state[i]]

def checkbox_container(data):
    if st.button('–í—ã–±—Ä–∞—Ç—å –≤—Å–µ'):
        for i in data:
            st.session_state['dynamic_checkbox_' + i] = True
        st.experimental_rerun()
    if st.button('–û—á–∏—Å—Ç–∏—Ç—å'):
        for i in data:
            st.session_state['dynamic_checkbox_' + i] = False
        st.experimental_rerun()
    for i in data:
        st.checkbox(i, key='dynamic_checkbox_' + i)


def input_page():
    st.session_state['input_done'] = False
    col1, col2 = st.columns((3, 1))
    with col1:
        st.header('–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ')
        header = st.text_input(label='–ó–∞–≥–æ–ª–æ–≤–æ–∫',
                               max_chars=200,
                               key=2
                               )
        st.session_state['header'] = header

        text_input_container = st.empty()
        text = text_input_container.text_area(label='–¢–µ–∫—Å—Ç',
                                              height=300,
                                              key=3
                                              )

        st.session_state['text'] = text

        if st.session_state['text'] and st.session_state['header']:
            button_container = st.empty()
            st.session_state['input_done'] = button_container.button('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å', disabled=False)

        if st.session_state['input_done']:
            st.session_state["active_sources"] = get_selected_checkboxes()
            text_input_container.empty()
            button_container.empty()

    with col2:
        st.header('–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏')
        checkbox_container(sources)


def backend_connection():
    st.write('–í—ã–±—Ä–∞–Ω—ã: ', ', '.join(st.session_state['active_sources']))
    report = get_report(st.session_state['header'], st.session_state['text'], st.session_state['sources'])
    status = report['status']
    if status == 'not found':
        not_found_page(rep)
    elif status == 'with primary':
        with_primary_page(report)
    elif status == 'no primary':
        no_primary_page(rep)

def not_found_page(rep):
    col1, col2 = st.columns((3, 3))
    with col1:
        st.title('–í–∞—à –∑–∞–ø—Ä–æ—Å')
        st.header(st.session_state['header'])
        st.text_area(label='–°–∞–º–∞—Ä–∏',
                     value ='samples' * 20,
                     height=300,
                     disabled=True)
    with col2:
        st.title('–ù–µ –Ω–∞–π–¥–µ–Ω–æ')
        st.header(f'–î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å : 0 %')
        st.markdown('–í–µ—Ä–¥–∏–∫—Ç: *__–Ω–µ –Ω–∞–π–¥–µ–Ω–æ__*')
        # –ø–∞—Ä—Å–∏–Ω–≥

def with_primary_page(rep):
    col1, col2 = st.columns((3, 3))
    with col1:
        #Hear we place user query title and NER from query content
        st.header('–í–∞—à –∑–∞–ø—Ä–æ—Å')
        st.markdown(f"#### {st.session_state['header']}")
        annotate_text(rep['ner_content'])

        #Hear we place primary of query and it's summary
        primary = rep['sources'][0]
        st.markdown(f"#### –ü–µ—Ä–≤–æ–∏—Å—Ç–æ—á–Ω–∏–∫: [{primary['name']}](https://{primary['url']})")
        annotate_text(primary['result']['ner_content'])

    with col2:
        col2.header(f'–î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å {rep["score"]} %')

        # st.markdown(f"#### –ö–ª–∏–∫–±–µ–π—Ç–Ω–æ—Å—Ç—å {rep['clickbait']} %")
        # st.markdown(f"#### –°–∞—Ç–∏—Ä–∏—á–Ω–æ—Å—Ç—å {rep['satirity']} %")
        st.metric(label="–ö–ª–∏–∫–±–µ–π—Ç–Ω–æ—Å—Ç—å", value=rep['clickbait'])
        st.metric(label="–°–∞—Ç–∏—Ä–∏—á–Ω–æ—Å—Ç—å", value=rep['satirity'])
        st.markdown('_________________')

        col2.header(f'–ò—Å—Ç–æ—á–Ω–∏–∫–∏:')

        for s in rep['sources']:
            if s['success'] == "True":
                st.markdown(f"### [{s['name']}](https://{s['url']})", unsafe_allow_html=True)
                annotate_text(s['result']['ner_content'])
            else:
                st.subheader(f'–í {s["name"]} –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')



def no_primary_page(rep):
    col1, col2 = st.columns((3, 3))
    with col1:
        #Hear we place user query title and NER from query content
        st.header('–í–∞—à –∑–∞–ø—Ä–æ—Å')
        st.subheader(st.session_state['header'])
        annotate_text(rep['ner_content'])

    with col2:
        st.title('–ò—Å–∫–∞–∂–µ–Ω–∏–µ')
        st.header(f'–î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å {rep["score"]} %')

        st.metric(label="–°–µ–º–∞–Ω—Ç–∏–∫–∞", value=rep['semantic'], delta="1.2")
        st.metric(label="–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å", value=rep['tonality'], delta="1.2")
        st.metric(label="–ö–ª–∏–∫–±–µ–π—Ç", value=rep['clickbait'], delta="1.2")
        st.metric(label="–°–∞—Ç–∏—Ä–∏—á–Ω–æ—Å—Ç—å", value=rep['satirity'], delta="1.2")

        for k, v in rep.items():
            if v['responce']:
                st.text_area(label=k,
                         value=f"{v['semant']}, {v['ton']}",
                         disabled=True)
                annotated_text("–ü–†–ò–ú–ï–†: ", ("Nemezida, –°—Ç–∞—Ä—Ç–∞–ø, —Ö–∞–∫–∞—Ç–æ–Ω", "—É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –≤ –æ–±–µ–∏—Ö —Å—Ç–∞—Ç—å—è—Ö"), "–´–´–´")
                annotated_text(("–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏, –∑–∞–∫–∞–∑—á–∏–∫–∏", "–Ω–µ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ"))
            else:
                st.text_area(label=k,
                             value=f"sample",
                             disabled=True)
input_page()
if st.session_state['input_done']:
    backend_connection()
